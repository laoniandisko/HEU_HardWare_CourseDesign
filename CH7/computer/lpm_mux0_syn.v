// megafunction wizard: %LPM_MUX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_MUX 

// ============================================================
// File Name: lpm_mux0.v
// Megafunction Name(s):
// 			LPM_MUX
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 17.1.0 Build 590 10/25/2017 SJ Lite Edition
// ************************************************************


//Copyright (C) 2017  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//lpm_mux DEVICE_FAMILY="Cyclone IV GX" LPM_SIZE=7 LPM_WIDTH=8 LPM_WIDTHS=3 data result sel
//VERSION_BEGIN 17.1 cbx_lpm_mux 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = lut 40 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  lpm_mux0_mux
	( 
	data,
	result,
	sel) /* synthesis synthesis_clearbox=1 */;
	input   [55:0]  data;
	output   [7:0]  result;
	input   [2:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [55:0]  data;
	tri0   [2:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [7:0]  result_node;
	wire  [2:0]  sel_ffs_wire;
	wire  [2:0]  sel_node;
	wire  [3:0]  w_data102w;
	wire  [3:0]  w_data103w;
	wire  [7:0]  w_data149w;
	wire  [3:0]  w_data171w;
	wire  [3:0]  w_data172w;
	wire  [7:0]  w_data218w;
	wire  [3:0]  w_data240w;
	wire  [3:0]  w_data241w;
	wire  [7:0]  w_data287w;
	wire  [3:0]  w_data309w;
	wire  [3:0]  w_data310w;
	wire  [3:0]  w_data31w;
	wire  [3:0]  w_data32w;
	wire  [7:0]  w_data356w;
	wire  [3:0]  w_data378w;
	wire  [3:0]  w_data379w;
	wire  [7:0]  w_data425w;
	wire  [3:0]  w_data447w;
	wire  [3:0]  w_data448w;
	wire  [7:0]  w_data494w;
	wire  [3:0]  w_data516w;
	wire  [3:0]  w_data517w;
	wire  [7:0]  w_data80w;
	wire  [7:0]  w_data9w;
	wire  [1:0]  w_sel104w;
	wire  [1:0]  w_sel173w;
	wire  [1:0]  w_sel242w;
	wire  [1:0]  w_sel311w;
	wire  [1:0]  w_sel33w;
	wire  [1:0]  w_sel380w;
	wire  [1:0]  w_sel449w;
	wire  [1:0]  w_sel518w;

	assign
		result = result_node,
		result_node = {((sel_node[2] & (((w_data517w[1] & w_sel518w[0]) & (~ (((w_data517w[0] & (~ w_sel518w[1])) & (~ w_sel518w[0])) | (w_sel518w[1] & (w_sel518w[0] | w_data517w[2]))))) | ((((w_data517w[0] & (~ w_sel518w[1])) & (~ w_sel518w[0])) | (w_sel518w[1] & (w_sel518w[0] | w_data517w[2]))) & (w_data517w[3] | (~ w_sel518w[0]))))) | ((~ sel_node[2]) & (((w_data516w[1] & w_sel518w[0]) & (~ (((w_data516w[0] & (~ w_sel518w[1])) & (~ w_sel518w[0])) | (w_sel518w[1] & (w_sel518w[0] | w_data516w[2]))))) | ((((w_data516w[0] & (~ w_sel518w[1])) & (~ w_sel518w[0])) | (w_sel518w[1] & (w_sel518w[0] | w_data516w[2]))) & (w_data516w[3] | (~ w_sel518w[0])))))), ((sel_node[2] & (((w_data448w[1] & w_sel449w[0]) & (~ (((w_data448w[0] & (~ w_sel449w[1])) & (~ w_sel449w[0])) | (w_sel449w[1] & (w_sel449w[0] | w_data448w[2]))))) | ((((w_data448w[0] & (~ w_sel449w[1])) & (~ w_sel449w[0])) | (w_sel449w[1] & (w_sel449w[0] | w_data448w[2]))) & (w_data448w[3] | (~ w_sel449w[0]))))) | ((~ sel_node[2]) & (((w_data447w[1] & w_sel449w[0]) & (~ (((w_data447w[0] & (~ w_sel449w[1])) & (~ w_sel449w[0])) | (w_sel449w[1] & (w_sel449w[0] | w_data447w[2]))))) | ((((w_data447w[0] & (~ w_sel449w[1])) & (~ w_sel449w[0])) | (w_sel449w[1] & (w_sel449w[0] | w_data447w[2]))) & (w_data447w[3] | (~ w_sel449w[0])))))), ((sel_node[2] & (((w_data379w[1] & w_sel380w[0]) & (~ (((w_data379w[0] & (~ w_sel380w[1])) & (~ w_sel380w[0])) | (w_sel380w[1] & (w_sel380w[0] | w_data379w[2]))))) | ((((w_data379w[0] & (~ w_sel380w[1])) & (~ w_sel380w[0])) | (w_sel380w[1] & (w_sel380w[0] | w_data379w[2]))) & (w_data379w[3] | (~ w_sel380w[0]))))) | ((~ sel_node[2]) & (((w_data378w[1] & w_sel380w[0]) & (~ (((w_data378w[0] & (~ w_sel380w[1])) & (~ w_sel380w[0])) | (w_sel380w[1] & (w_sel380w[0] | w_data378w[2]))))) | ((((w_data378w[0] & (~ w_sel380w[1])) & (~ w_sel380w[0])) | (w_sel380w[1] & (w_sel380w[0] | w_data378w[2]))) & (w_data378w[3] | (~ w_sel380w[0])))))), ((sel_node[2] & (((w_data310w[1] & w_sel311w[0]) & (~ (((w_data310w[0] & (~ w_sel311w[1])) & (~ w_sel311w[0])) | (w_sel311w[1]
 & (w_sel311w[0] | w_data310w[2]))))) | ((((w_data310w[0] & (~ w_sel311w[1])) & (~ w_sel311w[0])) | (w_sel311w[1] & (w_sel311w[0] | w_data310w[2]))) & (w_data310w[3] | (~ w_sel311w[0]))))) | ((~ sel_node[2]) & (((w_data309w[1] & w_sel311w[0]) & (~ (((w_data309w[0] & (~ w_sel311w[1])) & (~ w_sel311w[0])) | (w_sel311w[1] & (w_sel311w[0] | w_data309w[2]))))) | ((((w_data309w[0] & (~ w_sel311w[1])) & (~ w_sel311w[0])) | (w_sel311w[1] & (w_sel311w[0] | w_data309w[2]))) & (w_data309w[3] | (~ w_sel311w[0])))))), ((sel_node[2] & (((w_data241w[1] & w_sel242w[0]) & (~ (((w_data241w[0] & (~ w_sel242w[1])) & (~ w_sel242w[0])) | (w_sel242w[1] & (w_sel242w[0] | w_data241w[2]))))) | ((((w_data241w[0] & (~ w_sel242w[1])) & (~ w_sel242w[0])) | (w_sel242w[1] & (w_sel242w[0] | w_data241w[2]))) & (w_data241w[3] | (~ w_sel242w[0]))))) | ((~ sel_node[2]) & (((w_data240w[1] & w_sel242w[0]) & (~ (((w_data240w[0] & (~ w_sel242w[1])) & (~ w_sel242w[0])) | (w_sel242w[1] & (w_sel242w[0] | w_data240w[2]))))) | ((((w_data240w[0] & (~ w_sel242w[1])) & (~ w_sel242w[0])) | (w_sel242w[1] & (w_sel242w[0] | w_data240w[2]))) & (w_data240w[3] | (~ w_sel242w[0])))))), ((sel_node[2] & (((w_data172w[1] & w_sel173w[0]) & (~ (((w_data172w[0] & (~ w_sel173w[1])) & (~ w_sel173w[0])) | (w_sel173w[1] & (w_sel173w[0] | w_data172w[2]))))) | ((((w_data172w[0] & (~ w_sel173w[1])) & (~ w_sel173w[0])) | (w_sel173w[1] & (w_sel173w[0] | w_data172w[2]))) & (w_data172w[3] | (~ w_sel173w[0]))))) | ((~ sel_node[2]) & (((w_data171w[1] & w_sel173w[0]) & (~ (((w_data171w[0] & (~ w_sel173w[1])) & (~ w_sel173w[0])) | (w_sel173w[1] & (w_sel173w[0] | w_data171w[2]))))) | ((((w_data171w[0] & (~ w_sel173w[1])) & (~ w_sel173w[0])) | (w_sel173w[1] & (w_sel173w[0] | w_data171w[2]))) & (w_data171w[3] | (~ w_sel173w[0])))))), ((sel_node[2] & (((w_data103w[1] & w_sel104w[0]) & (~ (((w_data103w[0] & (~ w_sel104w[1])) & (~ w_sel104w[0])) | (w_sel104w[1] & (w_sel104w[0] | w_data103w[2]))))) | ((((w_data103w[0] & (~ w_sel104w[1])) & (~ w_sel104w[0])) | (w_sel104w[1] & (w_sel104w[0] | w_data103w[2]
))) & (w_data103w[3] | (~ w_sel104w[0]))))) | ((~ sel_node[2]) & (((w_data102w[1] & w_sel104w[0]) & (~ (((w_data102w[0] & (~ w_sel104w[1])) & (~ w_sel104w[0])) | (w_sel104w[1] & (w_sel104w[0] | w_data102w[2]))))) | ((((w_data102w[0] & (~ w_sel104w[1])) & (~ w_sel104w[0])) | (w_sel104w[1] & (w_sel104w[0] | w_data102w[2]))) & (w_data102w[3] | (~ w_sel104w[0])))))), ((sel_node[2] & (((w_data32w[1] & w_sel33w[0]) & (~ (((w_data32w[0] & (~ w_sel33w[1])) & (~ w_sel33w[0])) | (w_sel33w[1] & (w_sel33w[0] | w_data32w[2]))))) | ((((w_data32w[0] & (~ w_sel33w[1])) & (~ w_sel33w[0])) | (w_sel33w[1] & (w_sel33w[0] | w_data32w[2]))) & (w_data32w[3] | (~ w_sel33w[0]))))) | ((~ sel_node[2]) & (((w_data31w[1] & w_sel33w[0]) & (~ (((w_data31w[0] & (~ w_sel33w[1])) & (~ w_sel33w[0])) | (w_sel33w[1] & (w_sel33w[0] | w_data31w[2]))))) | ((((w_data31w[0] & (~ w_sel33w[1])) & (~ w_sel33w[0])) | (w_sel33w[1] & (w_sel33w[0] | w_data31w[2]))) & (w_data31w[3] | (~ w_sel33w[0]))))))},
		sel_ffs_wire = {sel[2:0]},
		sel_node = {sel_ffs_wire[2], sel[1:0]},
		w_data102w = w_data80w[3:0],
		w_data103w = w_data80w[7:4],
		w_data149w = {1'b0, data[50], data[42], data[34], data[26], data[18], data[10], data[2]},
		w_data171w = w_data149w[3:0],
		w_data172w = w_data149w[7:4],
		w_data218w = {1'b0, data[51], data[43], data[35], data[27], data[19], data[11], data[3]},
		w_data240w = w_data218w[3:0],
		w_data241w = w_data218w[7:4],
		w_data287w = {1'b0, data[52], data[44], data[36], data[28], data[20], data[12], data[4]},
		w_data309w = w_data287w[3:0],
		w_data310w = w_data287w[7:4],
		w_data31w = w_data9w[3:0],
		w_data32w = w_data9w[7:4],
		w_data356w = {1'b0, data[53], data[45], data[37], data[29], data[21], data[13], data[5]},
		w_data378w = w_data356w[3:0],
		w_data379w = w_data356w[7:4],
		w_data425w = {1'b0, data[54], data[46], data[38], data[30], data[22], data[14], data[6]},
		w_data447w = w_data425w[3:0],
		w_data448w = w_data425w[7:4],
		w_data494w = {1'b0, data[55], data[47], data[39], data[31], data[23], data[15], data[7]},
		w_data516w = w_data494w[3:0],
		w_data517w = w_data494w[7:4],
		w_data80w = {1'b0, data[49], data[41], data[33], data[25], data[17], data[9], data[1]},
		w_data9w = {1'b0, data[48], data[40], data[32], data[24], data[16], data[8], data[0]},
		w_sel104w = sel_node[1:0],
		w_sel173w = sel_node[1:0],
		w_sel242w = sel_node[1:0],
		w_sel311w = sel_node[1:0],
		w_sel33w = sel_node[1:0],
		w_sel380w = sel_node[1:0],
		w_sel449w = sel_node[1:0],
		w_sel518w = sel_node[1:0];
endmodule //lpm_mux0_mux
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module lpm_mux0 (
	data0x,
	data1x,
	data2x,
	data3x,
	data4x,
	data5x,
	data6x,
	sel,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	[7:0]  data0x;
	input	[7:0]  data1x;
	input	[7:0]  data2x;
	input	[7:0]  data3x;
	input	[7:0]  data4x;
	input	[7:0]  data5x;
	input	[7:0]  data6x;
	input	[2:0]  sel;
	output	[7:0]  result;

	wire [7:0] sub_wire8;
	wire [7:0] sub_wire7 = data0x[7:0];
	wire [7:0] sub_wire6 = data1x[7:0];
	wire [7:0] sub_wire5 = data2x[7:0];
	wire [7:0] sub_wire4 = data3x[7:0];
	wire [7:0] sub_wire3 = data4x[7:0];
	wire [7:0] sub_wire2 = data5x[7:0];
	wire [7:0] sub_wire0 = data6x[7:0];
	wire [55:0] sub_wire1 = {sub_wire7, sub_wire6, sub_wire5, sub_wire4, sub_wire3, sub_wire2, sub_wire0};
	wire [7:0] result = sub_wire8[7:0];

	lpm_mux0_mux	lpm_mux0_mux_component (
				.data (sub_wire1),
				.sel (sel),
				.result (sub_wire8));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV GX"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_SIZE NUMERIC "7"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MUX"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHS NUMERIC "3"
// Retrieval info: USED_PORT: data0x 0 0 8 0 INPUT NODEFVAL "data0x[7..0]"
// Retrieval info: USED_PORT: data1x 0 0 8 0 INPUT NODEFVAL "data1x[7..0]"
// Retrieval info: USED_PORT: data2x 0 0 8 0 INPUT NODEFVAL "data2x[7..0]"
// Retrieval info: USED_PORT: data3x 0 0 8 0 INPUT NODEFVAL "data3x[7..0]"
// Retrieval info: USED_PORT: data4x 0 0 8 0 INPUT NODEFVAL "data4x[7..0]"
// Retrieval info: USED_PORT: data5x 0 0 8 0 INPUT NODEFVAL "data5x[7..0]"
// Retrieval info: USED_PORT: data6x 0 0 8 0 INPUT NODEFVAL "data6x[7..0]"
// Retrieval info: USED_PORT: result 0 0 8 0 OUTPUT NODEFVAL "result[7..0]"
// Retrieval info: USED_PORT: sel 0 0 3 0 INPUT NODEFVAL "sel[2..0]"
// Retrieval info: CONNECT: @data 1 0 8 0 data0x 0 0 8 0
// Retrieval info: CONNECT: @data 1 1 8 0 data1x 0 0 8 0
// Retrieval info: CONNECT: @data 1 2 8 0 data2x 0 0 8 0
// Retrieval info: CONNECT: @data 1 3 8 0 data3x 0 0 8 0
// Retrieval info: CONNECT: @data 1 4 8 0 data4x 0 0 8 0
// Retrieval info: CONNECT: @data 1 5 8 0 data5x 0 0 8 0
// Retrieval info: CONNECT: @data 1 6 8 0 data6x 0 0 8 0
// Retrieval info: CONNECT: @sel 0 0 3 0 sel 0 0 3 0
// Retrieval info: CONNECT: result 0 0 8 0 @result 0 0 8 0
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mux0.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mux0.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mux0.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mux0.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mux0_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mux0_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
